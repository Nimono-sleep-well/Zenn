---
title: "初学者向けC言語講座"
emoji: "😸"
type: "tech" # tech: 技術記事 / idea: アイデア
topics: []
published: false
---
# 第1章　プログラミングってなに？

## 1.1　プログラミングとは

私たちは普段、言葉を使って人にお願いをしたり指示を出したりしています。
たとえば「冷蔵庫からジュースを取ってきて」と言えば、人はその意味を理解して動いてくれます。

一方で、コンピュータは人間の言葉をそのままでは理解できません。
そこで登場するのが「**プログラミング**」です。
プログラミングとは、**コンピュータが理解できる形で命令を書くこと**を指します。

> 【図1】人が命令 → コンピュータが動く のイメージ図
（左：人、中央：プログラム、右：コンピュータ。矢印で「命令を伝える」）
> 

---

## 1.2　コンピュータは命令どおりにしか動かない

コンピュータはとても正確ですが、「言われたことしかできない」という特徴があります。
つまり、**あいまいな指示は通じません**。

たとえば「適当にジュースを出して」と書いても、コンピュータは困ってしまいます。
「どこから」「どのジュースを」「どうやって出すか」をすべて命令として書かなければなりません。

プログラミングでは、このように**細かく順番に命令を組み立てる**必要があります。

---

## 1.3　C言語とはどんなもの？

C言語は、1970年代に開発された**歴史のあるプログラミング言語**です。
今でも多くの場面で使われています。たとえば次のようなものです。

- パソコンやスマートフォンの**基本的な仕組み（OS）**
- 家電製品の**中の制御プログラム**
- ゲームやアプリの**一部の処理**

C言語は「**機械に近い部分も扱える**」という特徴を持っています。
そのため、C言語を学ぶことは「コンピュータの考え方を理解する」ことにもつながります。

---

## 1.4　これから学ぶこと

この教材では、次のような流れでC言語を学んでいきます。

1. 開発環境を整える
2. 最初のプログラムを書いて動かす
3. 数字や文字を使う
4. 条件分岐や繰り返しを学ぶ
5. たくさんのデータを扱う
6. 自分の命令（関数）を作る

こうした基礎を身につけることで、自分の考えを**コンピュータに正確に伝える力**が育ちます。

---

# 第2章　開発環境を整えよう（WSL + GCC）

## 2.1　C言語を学ぶ環境について

C言語はもともと **UNIX系のOS** で使われてきた言語です。
そのため、Windowsよりも **Linux環境** のほうがC言語を扱いやすいです。

WindowsでもC言語の開発はできますが、次のような理由で少し大変です。

- 開発に必要なツール（コンパイラなど）が最初から入っていない
- トラブルシューティングの情報が少ない
- 教材によって環境の作り方がバラバラ

そこで今回は、Windowsの中に **Linuxを動かすWSL（Windows Subsystem for Linux）** を使い、Linux環境で学習します。

---

## 2.2　WSLのインストール

1. スタートメニューの検索から **「Windows機能の有効化または無効化」** を開く
2. 一覧の中から、次の二つにチェックを入れます
    - **Linux用Windowsサブシステム**
    - **Virtual Machine Platform（仮想マシンプラットフォーム）**
3. 指示に従って再起動
4. 再起動後、Microsoft Storeから **Ubuntu** をインストール
5. [Microsoft公式ページ](https://learn.microsoft.com/ja-jp/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package) から「**x64 マシン用 WSL2 Linux カーネル更新プログラム パッケージ**」をダウンロード
6. ダウンロードした **wsl_update_x64.msi** を実行
7. Ubuntuを起動（スタートメニューで検索、またはPowerShellから）
8. 起動後、次の設定を行います
    1. `Enter new UNIX username:` → Linuxでのユーザー名（自由に決めてOK）
    2. `New password:` → パスワードを入力（文字は表示されません）
    3. `Retype new password:` → 確認のためもう一度入力
9. `ユーザーネーム@PCネーム:$` の表示が出れば成功！

---

## 2.3　GCCとGDBのセットアップ

Linux環境にコンパイラ（GCC）とデバッガ（GDB）を入れます。

```bash
sudo apt update
sudo apt upgrade
sudo apt install gcc
sudo apt install gdb

```

- `[sudo] password for ユーザー名:` と出たら、設定したパスワードを入力（文字は表示されません）
- `Do you want to continue? [Y/n]` が出たら、`y` を入力してEnter
- GCCの確認：

```bash
gcc -v

```

- GDBの確認：

```bash
gdb -v

```

---

## 2.4　作業フォルダの作成

C言語のファイルは整理するため、専用フォルダを作ります。

```bash
mkdir sample-project
cd sample-project
```

> 💡 コラム：フォルダとディレクトリ
パソコンでは「フォルダ」と呼ばれる場所を、プログラミングの世界では「ディレクトリ」と呼ぶことがあります。
意味は同じなので、ここでは「フォルダ」で統一します。
> 

---

## 2.5　コンパイルについて（予告）

C言語のプログラムは、そのままでは実行できません。
まず「コンパイル」という作業をして、**実行可能なファイル**を作る必要があります。

```bash
gcc hello.c -o hello

```

- `o hello` → 出力ファイル名を hello にする指定
- 省略すると `a.out` という名前の実行ファイルが作られます

---

## 2.6　Visual Studio Codeのインストール

1. [VS Code公式サイト](https://code.visualstudio.com/) にアクセス
2. 「Windows版をダウンロード」してインストール
3. インストール中に便利な設定チェック：
    - 「**PATHに追加する**」
    - 「**右クリックメニューに追加する**」
    - 「**サポートされているファイルの種類を関連付ける**」

---

## 2.7　VS CodeをWSLとつなげる

1. VS Codeを起動
2. 左側の「拡張機能」アイコンをクリック
3. 検索欄に「**WSL**」と入力
4. **「WSL（Remote - WSL）」拡張機能** をインストール

> 💡 確認方法
WSL上で以下を実行：
> 

```bash
code .

```

VS Codeが起動し、現在のフォルダが開かれれば成功です。

---

# 第3章　はじめてのCプログラムを書こう

## 3.1　プログラムを書く準備

```bash
cd ~/sample-project
code hello.c

```

> 💡 ポイントcode hello.c でWSL内のファイルを直接VS Codeで開けます。
Windows側でフォルダを開くより安全です。
> 

---

### 📝 プログラムを入力

```c
#include <stdio.h>

int main(void) {
    printf("Hello, World!\\n");
    return 0;
}

```

---

### 💡 コードの説明

| 行 | 内容 |
| --- | --- |
| `#include <stdio.h>` | 画面に文字を表示するための機能を使えるようにするおまじない |
| `int main(void) { ... }` | プログラムの最初に動く場所 |
| `printf("Hello, World!\\n");` | 画面に「Hello, World!」と表示 |
| `return 0;` | プログラムが正常に終わった合図 |

---

## 3.2　コンパイルと実行

```bash
gcc hello.c -o hello
./hello

```

- `gcc` → C言語のコンパイラ
- `o hello` → 出力ファイル名を hello にする
- 実行すると画面に：

```
Hello, World!

```

---

## 3.3　トラブルシューティング

| エラー | 原因と解決策 |
| --- | --- |
| `code: command not found` | VS CodeのWSL拡張が入っていない |
| `gcc: command not found` | GCCがインストールされていない |
| `bash: ./hello: Permission denied` | 実行権限がない (`chmod +x hello`) |
| `expected ';' before 'return'` | セミコロンが抜けている |

---

## 3.4　まとめ

- プログラムは「書く → コンパイル → 実行」で動く
- `printf` は文字を表示する関数
- WSL上で `code` コマンドを使うと便利

---

# 第4章　変数とデータの扱い

## 4.1　変数とは

変数は**データを入れる箱**です。
たとえば、数字や文字を保存しておき、後で使うことができます。

```c
int number;
number = 10;
printf("%d\\n", number);

```

- `int` → 整数を入れる箱
- `%d` → 整数を表示するための記号

---

## 4.2　文字を扱う

```c
char letter;
letter = 'A';
printf("%c\\n", letter);

```

- `char` → 文字を入れる箱
- `%c` → 文字を表示する記号

---

## 4.3　まとめ

- 変数は「箱」と考える
- 型に応じて数字や文字を入れる
- `printf` で出力可能

---

# 第5章　条件分岐

## 5.1　if文

```c
int a = 10;

if (a > 5) {
    printf("aは5より大きい\\n");
}

```

- 条件が正しいときだけ処理を行う

---

## 5.2　else文

```c
int a = 3;

if (a > 5) {
    printf("aは5より大きい\\n");
} else {
    printf("aは5以下\\n");
}

```

- 条件が正しくない場合の処理も書ける

---

## 5.3　まとめ

- 条件に応じて処理を分ける
- `if` と `else` を使いこなそう

---

# 第6章　繰り返し

## 6.1　for文

```c
for (int i = 0; i < 5; i++) {
    printf("%d\\n", i);
}

```

- 0から4まで順番に数字を出力

---

## 6.2　while文

```c
int i = 0;
while (i < 5) {
    printf("%d\\n", i);
    i++;
}

```

- 条件が正しい間、繰り返す

---

## 6.3　まとめ

- 繰り返しはfor文とwhile文で表現できる
- i++ は「iを1増やす」の意味

---

# 第7章　関数

## 7.1　関数とは

関数は**自分で作れる命令**です。
よく使う処理をまとめておくと便利です。

```c
#include <stdio.h>

void greet() {
    printf("こんにちは！\\n");
}

int main(void) {
    greet();
    return 0;
}

```

- `void` → 戻り値がない関数
- `greet()` → 関数を呼び出す

---

## 7.2　引数と戻り値

```c
#include <stdio.h>

int add(int a, int b) {
    return a + b;
}

int main(void) {
    int result = add(3, 4);
    printf("%d\\n", result);
    return 0;
}

```

- `int add(int a, int b)` → 2つの整数を受け取り、整数を返す関数
- `return` → 関数の結果を返す

---

## 7.3　まとめ

- 関数は「自分で作る命令」
- 引数で情報を渡し、戻り値で結果を受け取れる
- コードを整理するのに役立つ

---

# 第8章　配列と文字列

## 8.1　配列

```c
int numbers[5] = {1, 2, 3, 4, 5};
printf("%d\\n", numbers[2]); // 3

```

- 配列は**同じ型の箱を複数まとめたもの**
- `[2]` → 3番目の要素（0番から数える）

---

## 8.2　文字列

```c
char name[6] = "Alice";
printf("%s\\n", name);

```

- `%s` → 文字列を表示する
- 文字列は文字の配列

---

## 8.3　まとめ

- 配列で複数のデータをまとめる
- 文字列も配列として扱う

---

# 第9章　まとめ

- プログラミングは「コンピュータへの命令」
- C言語は機械に近い処理も扱える便利な言語
- 基本の流れは「書く → コンパイル → 実行」
- 変数、条件分岐、繰り返し、関数、配列を学ぶことで、自由にプログラムが組める

> 💡 次は、これらの基礎を使って自分で小さなプログラムを作ってみよう！
> 

---